#!/usr/bin/env python
#coding:utf-8

"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

import time

def check_divisors(num):
    prime_divisors = []
    prime_divisor = 2
    while True:
        if num == 1: break
        # 一番最初に見つかった約数は素数なはず
        if num % prime_divisor == 0:
            num_of_divisors = 0
            # その素数で割れるだけ割る（素因数分解）
            while num % prime_divisor == 0:
                num = num/prime_divisor
                num_of_divisors += 1
            prime_divisors.append([prime_divisor, num_of_divisors])
        #prime_divisor += 1
        prime_divisor = odd_incr(prime_divisor)
    return prime_divisors

# 偶数を除外
def odd_incr(num):
    if num == 2:
        return num + 1
    else:
        return num + 2

if __name__ == '__main__':
    t = time.time()
    i = 2
    while True:
        num = sum(range(i))
        prime_divisors = check_divisors(num)
        ans = 1
        for j in xrange(len(prime_divisors)):
            ans *= prime_divisors[j][1]+1
        if ans > 500:
            print 'the anwer is ' + str(num)
            break
        i += 1
    print time.time() - t

